package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.microfocus.cobol.runtimeservices.RunUnit;
import com.jvm.balance.JVMCUSVCC;
import com.jvm.balance1.JVMCUSVCC1;
import com.jvm.balance.JVMCUSVCC.*;

public class BalanceEnqService_Child {


    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final AtomicInteger counter = new AtomicInteger(0);

    private static final Lock lock1 = new ReentrantLock();
    private static final Lock lock2 = new ReentrantLock();
    private static final Lock lock3 = new ReentrantLock();
    private static final Lock lock4 = new ReentrantLock();
    private static final Lock lock5 = new ReentrantLock();

    private static final RunUnit sharedRunUnit1;
    private static final RunUnit sharedRunUnit2;
    private static final RunUnit sharedRunUnit3;
    private static final RunUnit sharedRunUnit4;
    private static final RunUnit sharedRunUnit5;

    private static final JVMCUSVCC sharedJvm1;
    private static final JVMCUSVCC sharedJvm2;
    private static final JVMCUSVCC sharedJvm3;
    private static final JVMCUSVCC sharedJvm4;
    private static final JVMCUSVCC sharedJvm5;

    static {
        sharedRunUnit1 = new RunUnit();
        sharedJvm1 = new JVMCUSVCC();
        sharedRunUnit1.Add(sharedJvm1);

        sharedRunUnit2 = new RunUnit();
        sharedJvm2 = new JVMCUSVCC();
        sharedRunUnit2.Add(sharedJvm2);

        sharedRunUnit3 = new RunUnit();
        sharedJvm3 = new JVMCUSVCC();
        sharedRunUnit3.Add(sharedJvm3);

        sharedRunUnit4 = new RunUnit();
        sharedJvm4 = new JVMCUSVCC();
        sharedRunUnit4.Add(sharedJvm4);

        sharedRunUnit5 = new RunUnit();
        sharedJvm5 = new JVMCUSVCC();
        sharedRunUnit5.Add(sharedJvm5);

        logger.info("Shared RunUnits 1-5 initialized for Balance Enquiry.");
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String connectionString, String driverClass, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---RefNo: {}", refno);

        int index = counter.getAndIncrement() % 5;

        RunUnit selectedRunUnit;
        JVMCUSVCC selectedJvm;
        Lock selectedLock;

        switch (index) {
            case 0 : { selectedRunUnit = sharedRunUnit1; selectedJvm = sharedJvm1; selectedLock = lock1; }
            case 1 : { selectedRunUnit = sharedRunUnit2; selectedJvm = sharedJvm2; selectedLock = lock2; }
            case 2 : { selectedRunUnit = sharedRunUnit3; selectedJvm = sharedJvm3; selectedLock = lock3; }
            case 3 : { selectedRunUnit = sharedRunUnit4; selectedJvm = sharedJvm4; selectedLock = lock4; }
            default:  { selectedRunUnit = sharedRunUnit5; selectedJvm = sharedJvm5; selectedLock = lock5; }
        }

        List<String> result = new ArrayList<>();
        String outputRes = "", combinedRes = "", errno = "0000";
        int recordCount = 0;

        // COBOL input/output setup
        LsAccountNumber input1 = new LsAccountNumber();
        LsConnectionUrl input2 = new LsConnectionUrl();
        LsDriverClass input3 = new LsDriverClass();
        LsRecordArea inputRec = new LsRecordArea();
        LsOutputArray output1 = new LsOutputArray();
        LsErrorNumber output2 = new LsErrorNumber();
        LsArrayIndex output3 = new LsArrayIndex();
        LsErrorFlag output4 = new LsErrorFlag();

        input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
        input2.setLsConnectionUrl(connectionString);
        input3.setLsDriverClass(driverClass);
        inputRec.setLsRecordArea(inpcommonarea);

        try {
            if (selectedLock.tryLock(2, TimeUnit.SECONDS)) {
                try {
                    selectedRunUnit.Call("JVMCUSVCC", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output4.get_Reference(), output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference());

                    errno = output2.getLsErrorNumber();
                    outputRes = output1.getLsOutputArray();
                    recordCount = output3.getLsArrayIndex();

                    List<String> allRecords = new ArrayList<>();
                    for (int i = 0; i + 98 <= outputRes.length(); i += 98) {
                        String chunk = outputRes.substring(i, i + 98).trim();
                        if (chunk.isEmpty()) break;
                        allRecords.add(chunk);
                    }

                    combinedRes = String.join("", allRecords);
                    if (combinedRes.trim().isEmpty()) {
                        errno = output2.getLsErrorNumber();
                    }

                } finally {
                    selectedLock.unlock();
                }
            } else {
                logger.warn("Timeout acquiring lock for Balance Enquiry.");
                errno = "0155";
            }
        } catch (Exception e) {
            logger.error("Exception during Balance Enquiry: {}", e.getMessage(), e);
            errno = "3293";
        }

        result.add(combinedRes);
        result.add(String.valueOf(recordCount - 1));
        result.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---RefNo: {}", refno);
        return result;
    }
}


-------------------

package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.jvm.balance.JVMCUSVCC;
import com.jvm.balance1.JVMCUSVCC1;
import com.jvm.balance.JVMCUSVCC.*;
import com.jvm.balance1.JVMCUSVCC1.*;

public class BalanceEnqService_Child {

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final AtomicInteger counter = new AtomicInteger(0);

    private static final int TOTAL_UNITS = 6; // 3 for JVMCUSVCC, 3 for JVMCUSVCC1

    private static final Lock[] locks = new Lock[TOTAL_UNITS];
    private static final RunUnit[] sharedRunUnits = new RunUnit[TOTAL_UNITS];
    private static final Object[] cobolServices = new Object[TOTAL_UNITS]; // Either JVMCUSVCC or JVMCUSVCC1
    private static final String[] programNames = new String[TOTAL_UNITS];

    static {
        for (int i = 0; i < TOTAL_UNITS; i++) {
            locks[i] = new ReentrantLock();
            sharedRunUnits[i] = new RunUnit();

            if (i % 2 == 0) {
                // Even index: Use com.jvm.balance.JVMCUSVCC
                JVMCUSVCC svc = new JVMCUSVCC();
                sharedRunUnits[i].Add(svc);
                cobolServices[i] = svc;
                programNames[i] = "JVMCUSVCC";
            } else {
                // Odd index: Use com.jvm.balance1.JVMCUSVCC1
                JVMCUSVCC1 svc = new JVMCUSVCC1();
                sharedRunUnits[i].Add(svc);
                cobolServices[i] = svc;
                programNames[i] = "JVMCUSVCC1";
            }
        }
        logger.info("Initialized shared RunUnits for JVMCUSVCC and JVMCUSVCC1.");
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String connectionString, String driverClass, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---RefNo: {}", refno);

        int index = counter.getAndIncrement() % TOTAL_UNITS;

        RunUnit selectedRunUnit = sharedRunUnits[index];
        Lock selectedLock = locks[index];
        String programName = programNames[index];

        List<String> result = new ArrayList<>();
        String outputRes = "", combinedRes = "", errno = "0000";
        int recordCount = 0;

        // COBOL input/output setup
        LsAccountNumber input1 = new LsAccountNumber();
        LsConnectionUrl input2 = new LsConnectionUrl();
        LsDriverClass input3 = new LsDriverClass();
        LsRecordArea inputRec = new LsRecordArea();
        LsOutputArray output1 = new LsOutputArray();
        LsErrorNumber output2 = new LsErrorNumber();
        LsArrayIndex output3 = new LsArrayIndex();
        LsErrorFlag output4 = new LsErrorFlag();

        input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
        input2.setLsConnectionUrl(connectionString);
        input3.setLsDriverClass(driverClass);
        inputRec.setLsRecordArea(inpcommonarea);

        try {
            if (selectedLock.tryLock(2, TimeUnit.SECONDS)) {
                try {
                    selectedRunUnit.Call(programName, input1.get_Reference(), input2.get_Reference(), input3.get_Reference(),
                            output4.get_Reference(), output2.get_Reference(), output1.get_Reference(),
                            output3.get_Reference(), inputRec.get_Reference());

                    errno = output2.getLsErrorNumber();
                    outputRes = output1.getLsOutputArray();
                    recordCount = output3.getLsArrayIndex();

                    List<String> allRecords = new ArrayList<>();
                    for (int i = 0; i + 98 <= outputRes.length(); i += 98) {
                        String chunk = outputRes.substring(i, i + 98).trim();
                        if (chunk.isEmpty()) break;
                        allRecords.add(chunk);
                    }

                    combinedRes = String.join("", allRecords);
                    if (combinedRes.trim().isEmpty()) {
                        errno = output2.getLsErrorNumber();
                    }

                } finally {
                    selectedLock.unlock();
                }
            } else {
                logger.warn("Timeout acquiring lock for Balance Enquiry.");
                errno = "0155";
            }
        } catch (Exception e) {
            logger.error("Exception during Balance Enquiry: {}", e.getMessage(), e);
            errno = "3293";
        }

        result.add(combinedRes);
        result.add(String.valueOf(recordCount - 1));
        result.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---RefNo: {}", refno);
        return result;
    }
}

----------------------

package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microfocus.cobol.runtimeservices.RunUnit;

import com.jvm.balance.JVMCUSVCC;
import com.jvm.balance.JVMCUSVCC.*;
import com.jvm.balance1.JVMCUSVCC1;
import com.jvm.balance1.JVMCUSVCC1.*;

public class BalanceEnqService_Child {

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final AtomicInteger counter = new AtomicInteger(0);

    private static final int TOTAL_UNITS = 6;

    private static final Lock[] locks = new Lock[TOTAL_UNITS];

    private static final RunUnit sharedRunUnit1 = new RunUnit();
    private static final RunUnit sharedRunUnit2 = new RunUnit();
    private static final RunUnit sharedRunUnit3 = new RunUnit();
    private static final RunUnit sharedRunUnit4 = new RunUnit();
    private static final RunUnit sharedRunUnit5 = new RunUnit();
    private static final RunUnit sharedRunUnit6 = new RunUnit();

    private static final Object[] cobolInstances = new Object[TOTAL_UNITS];

    static {
        locks[0] = new ReentrantLock();
        locks[1] = new ReentrantLock();
        locks[2] = new ReentrantLock();
        locks[3] = new ReentrantLock();
        locks[4] = new ReentrantLock();
        locks[5] = new ReentrantLock();

        JVMCUSVCC cobol1 = new JVMCUSVCC();
        JVMCUSVCC1 cobol2 = new JVMCUSVCC1();
        JVMCUSVCC cobol3 = new JVMCUSVCC();
        JVMCUSVCC1 cobol4 = new JVMCUSVCC1();
        JVMCUSVCC cobol5 = new JVMCUSVCC();
        JVMCUSVCC1 cobol6 = new JVMCUSVCC1();

        sharedRunUnit1.Add(cobol1);
        sharedRunUnit2.Add(cobol2);
        sharedRunUnit3.Add(cobol3);
        sharedRunUnit4.Add(cobol4);
        sharedRunUnit5.Add(cobol5);
        sharedRunUnit6.Add(cobol6);

        cobolInstances[0] = cobol1;
        cobolInstances[1] = cobol2;
        cobolInstances[2] = cobol3;
        cobolInstances[3] = cobol4;
        cobolInstances[4] = cobol5;
        cobolInstances[5] = cobol6;

        logger.info("Shared RunUnits and COBOL objects initialized.");
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String connectionString, String driverClass, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---RefNo: {}", refno);

        int index = counter.getAndIncrement() % TOTAL_UNITS;
        Lock selectedLock = locks[index];
        Object cobolObj = cobolInstances[index];

        List<String> result = new ArrayList<>();
        String outputRes = "", combinedRes = "", errno = "0000";
        int recordCount = 0;

        try {
            if (selectedLock.tryLock(2, TimeUnit.SECONDS)) {
                try {
                    if (cobolObj instanceof JVMCUSVCC) {
                        LsAccountNumber input1 = new LsAccountNumber();
                        LsConnectionUrl input2 = new LsConnectionUrl();
                        LsDriverClass input3 = new LsDriverClass();
                        LsRecordArea inputRec = new LsRecordArea();
                        LsOutputArray output1 = new LsOutputArray();
                        LsErrorNumber output2 = new LsErrorNumber();
                        LsArrayIndex output3 = new LsArrayIndex();
                        LsErrorFlag output4 = new LsErrorFlag();

                        input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
                        input2.setLsConnectionUrl(connectionString);
                        input3.setLsDriverClass(driverClass);
                        inputRec.setLsRecordArea(inpcommonarea);

                        ((JVMCUSVCC) cobolObj).Balance_Enquiry(
                            input1.get_Reference(), input2.get_Reference(), input3.get_Reference(),
                            output4.get_Reference(), output2.get_Reference(), output1.get_Reference(),
                            output3.get_Reference(), inputRec.get_Reference());

                        errno = output2.getLsErrorNumber();
                        outputRes = output1.getLsOutputArray();
                        recordCount = output3.getLsArrayIndex();

                    } else if (cobolObj instanceof JVMCUSVCC1) {
                        LsAccountNumber1 input1 = new LsAccountNumber1();
                        LsConnectionUrl1 input2 = new LsConnectionUrl1();
                        LsDriverClass1 input3 = new LsDriverClass1();
                        LsRecordArea1 inputRec = new LsRecordArea1();
                        LsOutputArray1 output1 = new LsOutputArray1();
                        LsErrorNumber1 output2 = new LsErrorNumber1();
                        LsArrayIndex1 output3 = new LsArrayIndex1();
                        LsErrorFlag1 output4 = new LsErrorFlag1();

                        input1.setLsAccountNumber1(String.format("%017d", new BigInteger(accno)));
                        input2.setLsConnectionUrl1(connectionString);
                        input3.setLsDriverClass1(driverClass);
                        inputRec.setLsRecordArea1(inpcommonarea);

                        ((JVMCUSVCC1) cobolObj).Balance_Enquiry1(
                            input1.get_Reference(), input2.get_Reference(), input3.get_Reference(),
                            output4.get_Reference(), output2.get_Reference(), output1.get_Reference(),
                            output3.get_Reference(), inputRec.get_Reference());

                        errno = output2.getLsErrorNumber1();
                        outputRes = output1.getLsOutputArray1();
                        recordCount = output3.getLsArrayIndex1();
                    }

                    List<String> allRecords = new ArrayList<>();
                    for (int i = 0; i + 98 <= outputRes.length(); i += 98) {
                        String chunk = outputRes.substring(i, i + 98).trim();
                        if (chunk.isEmpty()) break;
                        allRecords.add(chunk);
                    }

                    combinedRes = String.join("", allRecords);
                    if (combinedRes.trim().isEmpty()) {
                        errno = "9999";
                    }

                } finally {
                    selectedLock.unlock();
                }
            } else {
                logger.warn("Timeout acquiring lock for Balance Enquiry.");
                errno = "0155";
            }
        } catch (Exception e) {
            logger.error("Exception during Balance Enquiry: {}", e.getMessage(), e);
            errno = "3293";
        }

        result.add(combinedRes);
        result.add(String.valueOf(recordCount - 1));
        result.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---RefNo: {}", refno);
        return result;
    }
}

-------------


package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.jvm.balance.JVMCUSVCC;
import com.jvm.balance1.JVMCUSVCC1;
import com.jvm.balance.JVMCUSVCC.*;
import com.jvm.balance1.JVMCUSVCC1.*;

public class BalanceEnqService_Child {

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final AtomicInteger counter = new AtomicInteger(0);

    private static final Lock[] locks = new Lock[10];
    private static final RunUnit[] sharedRunUnits = new RunUnit[10];
    private static final Object[] sharedJvms = new Object[10]; // Can hold JVMCUSVCC or JVMCUSVCC1

    static {
        for (int i = 0; i < 10; i++) {
            locks[i] = new ReentrantLock();
            sharedRunUnits[i] = new RunUnit();
            if (i % 2 == 0) {
                sharedJvms[i] = new JVMCUSVCC();
                sharedRunUnits[i].Add((JVMCUSVCC) sharedJvms[i]);
            } else {
                sharedJvms[i] = new JVMCUSVCC1();
                sharedRunUnits[i].Add((JVMCUSVCC1) sharedJvms[i]);
            }
        }
        logger.info("Initialized 10 shared RunUnits alternating between JVMCUSVCC and JVMCUSVCC1.");
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String connectionString, String driverClass, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---RefNo: {}", refno);

        int index = counter.getAndIncrement() % 10;
        RunUnit selectedRunUnit = sharedRunUnits[index];
        Lock selectedLock = locks[index];

        List<String> result = new ArrayList<>();
        String outputRes = "", combinedRes = "", errno = "0000";
        int recordCount = 0;

        try {
            if (selectedLock.tryLock(2, TimeUnit.SECONDS)) {
                try {
                    if (index % 2 == 0) {
                        // JVMCUSVCC (even indices)
                        LsAccountNumber input1 = new LsAccountNumber();
                        LsConnectionUrl input2 = new LsConnectionUrl();
                        LsDriverClass input3 = new LsDriverClass();
                        LsRecordArea inputRec = new LsRecordArea();
                        LsOutputArray output1 = new LsOutputArray();
                        LsErrorNumber output2 = new LsErrorNumber();
                        LsArrayIndex output3 = new LsArrayIndex();
                        LsErrorFlag output4 = new LsErrorFlag();

                        input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
                        input2.setLsConnectionUrl(connectionString);
                        input3.setLsDriverClass(driverClass);
                        inputRec.setLsRecordArea(inpcommonarea);

                        selectedRunUnit.Call("JVMCUSVCC", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output4.get_Reference(), output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference());

                        errno = output2.getLsErrorNumber();
                        outputRes = output1.getLsOutputArray();
                        recordCount = output3.getLsArrayIndex();

                    } else {
                        // JVMCUSVCC1 (odd indices)
                        LsAccountNumber1 input1 = new LsAccountNumber1();
                        LsConnectionUrl1 input2 = new LsConnectionUrl1();
                        LsDriverClass1 input3 = new LsDriverClass1();
                        LsRecordArea1 inputRec = new LsRecordArea1();
                        LsOutputArray1 output1 = new LsOutputArray1();
                        LsErrorNumber1 output2 = new LsErrorNumber1();
                        LsArrayIndex1 output3 = new LsArrayIndex1();
                        LsErrorFlag1 output4 = new LsErrorFlag1();

                        input1.setLsAccountNumber1(String.format("%017d", new BigInteger(accno)));
                        input2.setLsConnectionUrl1(connectionString);
                        input3.setLsDriverClass1(driverClass);
                        inputRec.setLsRecordArea1(inpcommonarea);

                        selectedRunUnit.Call("JVMCUSVCC1", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output4.get_Reference(), output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference());

                        errno = output2.getLsErrorNumber1();
                        outputRes = output1.getLsOutputArray1();
                        recordCount = output3.getLsArrayIndex1();
                    }

                    List<String> allRecords = new ArrayList<>();
                    for (int i = 0; i + 98 <= outputRes.length(); i += 98) {
                        String chunk = outputRes.substring(i, i + 98).trim();
                        if (chunk.isEmpty()) break;
                        allRecords.add(chunk);
                    }

                    combinedRes = String.join("", allRecords);
                    if (combinedRes.trim().isEmpty()) {
                        errno = "0001";
                    }

                } finally {
                    selectedLock.unlock();
                }
            } else {
                logger.warn("Timeout acquiring lock for Balance Enquiry.");
                errno = "0155";
            }
        } catch (Exception e) {
            logger.error("Exception during Balance Enquiry: {}", e.getMessage(), e);
            errno = "3293";
        }

        result.add(combinedRes);
        result.add(String.valueOf(recordCount - 1));
        result.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---RefNo: {}", refno);
        return result;
    }
}


--------------------------

package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.jvm.balance.*;
import com.jvm.balance1.*;
import com.jvm.balance2.*;
import com.jvm.balance3.*;
import com.jvm.balance4.*;

public class BalanceEnqService_Child {

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final AtomicInteger counter = new AtomicInteger(0);

    private static final Lock[] locks = {
        new ReentrantLock(), new ReentrantLock(),
        new ReentrantLock(), new ReentrantLock(),
        new ReentrantLock()
    };

    private static final RunUnit[] sharedRunUnits = new RunUnit[5];
    private static final Object[] sharedJvms = new Object[5];

    static {
        sharedRunUnits[0] = new RunUnit();
        sharedJvms[0] = new JVMCUSVCC();
        sharedRunUnits[0].Add(sharedJvms[0]);

        sharedRunUnits[1] = new RunUnit();
        sharedJvms[1] = new JVMCUSVCC1();
        sharedRunUnits[1].Add(sharedJvms[1]);

        sharedRunUnits[2] = new RunUnit();
        sharedJvms[2] = new JVMCUSVCC2();
        sharedRunUnits[2].Add(sharedJvms[2]);

        sharedRunUnits[3] = new RunUnit();
        sharedJvms[3] = new JVMCUSVCC3();
        sharedRunUnits[3].Add(sharedJvms[3]);

        sharedRunUnits[4] = new RunUnit();
        sharedJvms[4] = new JVMCUSVCC4();
        sharedRunUnits[4].Add(sharedJvms[4]);

        logger.info("Shared RunUnits 0-4 initialized.");
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String connectionString, String driverClass, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---RefNo: {}", refno);

        int index = counter.getAndIncrement() % 5;
        RunUnit runUnit = sharedRunUnits[index];
        Lock lock = locks[index];
        Object jvmInstance = sharedJvms[index];

        List<String> result = new ArrayList<>();
        String outputRes = "", combinedRes = "", errno = "0000";
        int recordCount = 0;

        try {
            if (lock.tryLock(2, TimeUnit.SECONDS)) {
                try {
                    switch (index) {
                        case 0: {
                            LsAccountNumber i1 = new LsAccountNumber();
                            LsConnectionUrl i2 = new LsConnectionUrl();
                            LsDriverClass i3 = new LsDriverClass();
                            LsRecordArea i4 = new LsRecordArea();
                            LsOutputArray o1 = new LsOutputArray();
                            LsErrorNumber o2 = new LsErrorNumber();
                            LsArrayIndex o3 = new LsArrayIndex();
                            LsErrorFlag o4 = new LsErrorFlag();

                            i1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
                            i2.setLsConnectionUrl(connectionString);
                            i3.setLsDriverClass(driverClass);
                            i4.setLsRecordArea(inpcommonarea);

                            runUnit.Call("JVMCUSVCC", i1.get_Reference(), i2.get_Reference(), i3.get_Reference(), o4.get_Reference(), o2.get_Reference(), o1.get_Reference(), o3.get_Reference(), i4.get_Reference());

                            errno = o2.getLsErrorNumber();
                            outputRes = o1.getLsOutputArray();
                            recordCount = o3.getLsArrayIndex();
                            break;
                        }
                        case 1: {
                            LsAccountNumber1 i1 = new LsAccountNumber1();
                            LsConnectionUrl1 i2 = new LsConnectionUrl1();
                            LsDriverClass1 i3 = new LsDriverClass1();
                            LsRecordArea1 i4 = new LsRecordArea1();
                            LsOutputArray1 o1 = new LsOutputArray1();
                            LsErrorNumber1 o2 = new LsErrorNumber1();
                            LsArrayIndex1 o3 = new LsArrayIndex1();
                            LsErrorFlag1 o4 = new LsErrorFlag1();

                            i1.setLsAccountNumber1(String.format("%017d", new BigInteger(accno)));
                            i2.setLsConnectionUrl1(connectionString);
                            i3.setLsDriverClass1(driverClass);
                            i4.setLsRecordArea1(inpcommonarea);

                            runUnit.Call("JVMCUSVCC1", i1.get_Reference(), i2.get_Reference(), i3.get_Reference(), o4.get_Reference(), o2.get_Reference(), o1.get_Reference(), o3.get_Reference(), i4.get_Reference());

                            errno = o2.getLsErrorNumber1();
                            outputRes = o1.getLsOutputArray1();
                            recordCount = o3.getLsArrayIndex1();
                            break;
                        }
                        case 2: {
                            LsAccountNumber2 i1 = new LsAccountNumber2();
                            LsConnectionUrl2 i2 = new LsConnectionUrl2();
                            LsDriverClass2 i3 = new LsDriverClass2();
                            LsRecordArea2 i4 = new LsRecordArea2();
                            LsOutputArray2 o1 = new LsOutputArray2();
                            LsErrorNumber2 o2 = new LsErrorNumber2();
                            LsArrayIndex2 o3 = new LsArrayIndex2();
                            LsErrorFlag2 o4 = new LsErrorFlag2();

                            i1.setLsAccountNumber2(String.format("%017d", new BigInteger(accno)));
                            i2.setLsConnectionUrl2(connectionString);
                            i3.setLsDriverClass2(driverClass);
                            i4.setLsRecordArea2(inpcommonarea);

                            runUnit.Call("JVMCUSVCC2", i1.get_Reference(), i2.get_Reference(), i3.get_Reference(), o4.get_Reference(), o2.get_Reference(), o1.get_Reference(), o3.get_Reference(), i4.get_Reference());

                            errno = o2.getLsErrorNumber2();
                            outputRes = o1.getLsOutputArray2();
                            recordCount = o3.getLsArrayIndex2();
                            break;
                        }
                        case 3: {
                            LsAccountNumber3 i1 = new LsAccountNumber3();
                            LsConnectionUrl3 i2 = new LsConnectionUrl3();
                            LsDriverClass3 i3 = new LsDriverClass3();
                            LsRecordArea3 i4 = new LsRecordArea3();
                            LsOutputArray3 o1 = new LsOutputArray3();
                            LsErrorNumber3 o2 = new LsErrorNumber3();
                            LsArrayIndex3 o3 = new LsArrayIndex3();
                            LsErrorFlag3 o4 = new LsErrorFlag3();

                            i1.setLsAccountNumber3(String.format("%017d", new BigInteger(accno)));
                            i2.setLsConnectionUrl3(connectionString);
                            i3.setLsDriverClass3(driverClass);
                            i4.setLsRecordArea3(inpcommonarea);

                            runUnit.Call("JVMCUSVCC3", i1.get_Reference(), i2.get_Reference(), i3.get_Reference(), o4.get_Reference(), o2.get_Reference(), o1.get_Reference(), o3.get_Reference(), i4.get_Reference());

                            errno = o2.getLsErrorNumber3();
                            outputRes = o1.getLsOutputArray3();
                            recordCount = o3.getLsArrayIndex3();
                            break;
                        }
                        case 4: {
                            LsAccountNumber4 i1 = new LsAccountNumber4();
                            LsConnectionUrl4 i2 = new LsConnectionUrl4();
                            LsDriverClass4 i3 = new LsDriverClass4();
                            LsRecordArea4 i4 = new LsRecordArea4();
                            LsOutputArray4 o1 = new LsOutputArray4();
                            LsErrorNumber4 o2 = new LsErrorNumber4();
                            LsArrayIndex4 o3 = new LsArrayIndex4();
                            LsErrorFlag4 o4 = new LsErrorFlag4();

                            i1.setLsAccountNumber4(String.format("%017d", new BigInteger(accno)));
                            i2.setLsConnectionUrl4(connectionString);
                            i3.setLsDriverClass4(driverClass);
                            i4.setLsRecordArea4(inpcommonarea);

                            runUnit.Call("JVMCUSVCC4", i1.get_Reference(), i2.get_Reference(), i3.get_Reference(), o4.get_Reference(), o2.get_Reference(), o1.get_Reference(), o3.get_Reference(), i4.get_Reference());

                            errno = o2.getLsErrorNumber4();
                            outputRes = o1.getLsOutputArray4();
                            recordCount = o3.getLsArrayIndex4();
                            break;
                        }
                    }

                    List<String> allRecords = new ArrayList<>();
                    for (int i = 0; i + 98 <= outputRes.length(); i += 98) {
                        String chunk = outputRes.substring(i, i + 98).trim();
                        if (chunk.isEmpty()) break;
                        allRecords.add(chunk);
                    }

                    combinedRes = String.join("", allRecords);
                    if (combinedRes.trim().isEmpty()) {
                        errno = "0001";
                    }

                } finally {
                    lock.unlock();
                }
            } else {
                logger.warn("Timeout acquiring lock for Balance Enquiry.");
                errno = "0155";
            }
        } catch (Exception e) {
            logger.error("Exception during Balance Enquiry: {}", e.getMessage(), e);
            errno = "3293";
        }

        result.add(combinedRes);
        result.add(String.valueOf(recordCount - 1));
        result.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---RefNo: {}", refno);
        return result;
    }
}