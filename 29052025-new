package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microfocus.cobol.runtimeservices.RunUnit;

import com.jvm.balance.JVMCUSVCC;
import com.jvm.balance1.JVMCUSVCC1;
import com.jvm.balance2.JVMCUSVCC2;
import com.jvm.balance3.JVMCUSVCC3;
import com.jvm.balance4.JVMCUSVCC4;

import com.jvm.balance.JVMCUSVCC.*;
import com.jvm.balance1.JVMCUSVCC1.*;
import com.jvm.balance2.JVMCUSVCC2.*;
import com.jvm.balance3.JVMCUSVCC3.*;
import com.jvm.balance4.JVMCUSVCC4.*;

public class BalanceEnqService_Child {

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final AtomicInteger counter = new AtomicInteger(0);

    private static final Lock[] locks = new Lock[10];
    private static final RunUnit[] sharedRunUnits = new RunUnit[10];
    private static final Object[] sharedJvms = new Object[10];

    static {
        for (int i = 0; i < 10; i++) {
            locks[i] = new ReentrantLock();
            sharedRunUnits[i] = new RunUnit();
            switch (i % 5) {
                case 0 -> {
                    sharedJvms[i] = new JVMCUSVCC();
                    sharedRunUnits[i].Add((JVMCUSVCC) sharedJvms[i]);
                }
                case 1 -> {
                    sharedJvms[i] = new JVMCUSVCC1();
                    sharedRunUnits[i].Add((JVMCUSVCC1) sharedJvms[i]);
                }
                case 2 -> {
                    sharedJvms[i] = new JVMCUSVCC2();
                    sharedRunUnits[i].Add((JVMCUSVCC2) sharedJvms[i]);
                }
                case 3 -> {
                    sharedJvms[i] = new JVMCUSVCC3();
                    sharedRunUnits[i].Add((JVMCUSVCC3) sharedJvms[i]);
                }
                case 4 -> {
                    sharedJvms[i] = new JVMCUSVCC4();
                    sharedRunUnits[i].Add((JVMCUSVCC4) sharedJvms[i]);
                }
            }
        }
        logger.info("Initialized 10 shared RunUnits alternating among JVMCUSVCC0 to JVMCUSVCC4.");
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String connectionString, String driverClass, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---RefNo: {}", refno);

        int index = counter.getAndIncrement() % 10;
        int variant = index % 5;

        RunUnit selectedRunUnit = sharedRunUnits[index];
        Lock selectedLock = locks[index];

        List<String> result = new ArrayList<>();
        String outputRes = "", combinedRes = "", errno = "0000";
        int recordCount = 0;

        try {
            if (selectedLock.tryLock(2, TimeUnit.SECONDS)) {
                try {
                    switch (variant) {
                        case 0 -> {
                            LsAccountNumber input1 = new LsAccountNumber();
                            LsConnectionUrl input2 = new LsConnectionUrl();
                            LsDriverClass input3 = new LsDriverClass();
                            LsRecordArea inputRec = new LsRecordArea();
                            LsOutputArray output1 = new LsOutputArray();
                            LsErrorNumber output2 = new LsErrorNumber();
                            LsArrayIndex output3 = new LsArrayIndex();
                            LsErrorFlag output4 = new LsErrorFlag();

                            input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
                            input2.setLsConnectionUrl(connectionString);
                            input3.setLsDriverClass(driverClass);
                            inputRec.setLsRecordArea(inpcommonarea);

                            selectedRunUnit.Call("JVMCUSVCC", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output4.get_Reference(), output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference());

                            errno = output2.getLsErrorNumber();
                            outputRes = output1.getLsOutputArray();
                            recordCount = output3.getLsArrayIndex();
                        }
                        case 1 -> {
                            LsAccountNumber1 input1 = new LsAccountNumber1();
                            LsConnectionUrl1 input2 = new LsConnectionUrl1();
                            LsDriverClass1 input3 = new LsDriverClass1();
                            LsRecordArea1 inputRec = new LsRecordArea1();
                            LsOutputArray1 output1 = new LsOutputArray1();
                            LsErrorNumber1 output2 = new LsErrorNumber1();
                            LsArrayIndex1 output3 = new LsArrayIndex1();
                            LsErrorFlag1 output4 = new LsErrorFlag1();

                            input1.setLsAccountNumber1(String.format("%017d", new BigInteger(accno)));
                            input2.setLsConnectionUrl1(connectionString);
                            input3.setLsDriverClass1(driverClass);
                            inputRec.setLsRecordArea1(inpcommonarea);

                            selectedRunUnit.Call("JVMCUSVCC1", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output4.get_Reference(), output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference());

                            errno = output2.getLsErrorNumber1();
                            outputRes = output1.getLsOutputArray1();
                            recordCount = output3.getLsArrayIndex1();
                        }
                        case 2 -> {
                            LsAccountNumber2 input1 = new LsAccountNumber2();
                            LsConnectionUrl2 input2 = new LsConnectionUrl2();
                            LsDriverClass2 input3 = new LsDriverClass2();
                            LsRecordArea2 inputRec = new LsRecordArea2();
                            LsOutputArray2 output1 = new LsOutputArray2();
                            LsErrorNumber2 output2 = new LsErrorNumber2();
                            LsArrayIndex2 output3 = new LsArrayIndex2();
                            LsErrorFlag2 output4 = new LsErrorFlag2();

                            input1.setLsAccountNumber2(String.format("%017d", new BigInteger(accno)));
                            input2.setLsConnectionUrl2(connectionString);
                            input3.setLsDriverClass2(driverClass);
                            inputRec.setLsRecordArea2(inpcommonarea);

                            selectedRunUnit.Call("JVMCUSVCC2", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output4.get_Reference(), output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference());

                            errno = output2.getLsErrorNumber2();
                            outputRes = output1.getLsOutputArray2();
                            recordCount = output3.getLsArrayIndex2();
                        }
                        case 3 -> {
                            LsAccountNumber3 input1 = new LsAccountNumber3();
                            LsConnectionUrl3 input2 = new LsConnectionUrl3();
                            LsDriverClass3 input3 = new LsDriverClass3();
                            LsRecordArea3 inputRec = new LsRecordArea3();
                            LsOutputArray3 output1 = new LsOutputArray3();
                            LsErrorNumber3 output2 = new LsErrorNumber3();
                            LsArrayIndex3 output3 = new LsArrayIndex3();
                            LsErrorFlag3 output4 = new LsErrorFlag3();

                            input1.setLsAccountNumber3(String.format("%017d", new BigInteger(accno)));
                            input2.setLsConnectionUrl3(connectionString);
                            input3.setLsDriverClass3(driverClass);
                            inputRec.setLsRecordArea3(inpcommonarea);

                            selectedRunUnit.Call("JVMCUSVCC3", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output4.get_Reference(), output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference());

                            errno = output2.getLsErrorNumber3();
                            outputRes = output1.getLsOutputArray3();
                            recordCount = output3.getLsArrayIndex3();
                        }
                        case 4 -> {
                            LsAccountNumber4 input1 = new LsAccountNumber4();
                            LsConnectionUrl4 input2 = new LsConnectionUrl4();
                            LsDriverClass4 input3 = new LsDriverClass4();
                            LsRecordArea4 inputRec = new LsRecordArea4();
                            LsOutputArray4 output1 = new LsOutputArray4();
                            LsErrorNumber4 output2 = new LsErrorNumber4();
                            LsArrayIndex4 output3 = new LsArrayIndex4();
                            LsErrorFlag4 output4 = new LsErrorFlag4();

                            input1.setLsAccountNumber4(String.format("%017d", new BigInteger(accno)));
                            input2.setLsConnectionUrl4(connectionString);
                            input3.setLsDriverClass4(driverClass);
                            inputRec.setLsRecordArea4(inpcommonarea);

                            selectedRunUnit.Call("JVMCUSVCC4", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output4.get_Reference(), output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference());

                            errno = output2.getLsErrorNumber4();
                            outputRes = output1.getLsOutputArray4();
                            recordCount = output3.getLsArrayIndex4();
                        }
                    }

                    List<String> allRecords = new ArrayList<>();
                    for (int i = 0; i + 98 <= outputRes.length(); i += 98) {
                        String chunk = outputRes.substring(i, i + 98).trim();
                        if (chunk.isEmpty()) break;
                        allRecords.add(chunk);
                    }

                    combinedRes = String.join("", allRecords);
                    if (combinedRes.trim().isEmpty()) {
                        errno = "0001";
                    }

                } finally {
                    selectedLock.unlock();
                }
            } else {
                logger.warn("Timeout acquiring lock for Balance Enquiry.");
                errno = "0155";
            }
        } catch (Exception e) {
            logger.error("Exception during Balance Enquiry: {}", e.getMessage(), e);
            errno = "3293";
        }

        result.add(combinedRes);
        result.add(String.valueOf(recordCount - 1));
        result.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---RefNo: {}", refno);
        return result;
    }
}