package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.jvm.balance.JVMAVBL.LsRecordArea;
import com.jvm.balance.JVMCUSVCC;
import com.jvm.balance.JVMCUSVCC.LsAccountNumber;
import com.jvm.balance.JVMCUSVCC.LsArrayIndex;
import com.jvm.balance.JVMCUSVCC.LsConnectionUrl;
import com.jvm.balance.JVMCUSVCC.LsDriverClass;
import com.jvm.balance.JVMCUSVCC.LsErrorNumber;
import com.jvm.balance.JVMCUSVCC.LsOutputArray;

public class BalanceEnqService_Child {
	
    @Value("${day.datasource.jdbc-url}")
    private String dayJdbcUrl;
	
    @Value("${day.datasource.username}")
    private String dayUsername;

    @Value("${day.datasource.password}")
    private String dayPassword;
    
    @Value("${day.datasource.driver-class-name}")
    private String dayDriverClass;
    
    @Value("${night.datasource.jdbc-url}")
    private String nightJdbcUrl;

    @Value("${night.datasource.username}")
    private String nightUsername;

    @Value("${night.datasource.password}")
    private String nightPassword;
    
    @Value("${night.datasource.driver-class-name}")
    private String nightDriverClass;

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final AtomicInteger counter = new AtomicInteger(0);

    private static final Lock lock1 = new ReentrantLock();
    private static final Lock lock2 = new ReentrantLock();
    private static final Lock lock3 = new ReentrantLock();
    private static final Lock lock4 = new ReentrantLock();
    private static final Lock lock5 = new ReentrantLock();

    private static RunUnit sharedRunUnit1;
    private static JVMCUSVCC sharedJvm1;

    private static RunUnit sharedRunUnit2;
    private static JVMCUSVCC sharedJvm2;

    private static RunUnit sharedRunUnit3;
    private static JVMCUSVCC sharedJvm3;

    private static RunUnit sharedRunUnit4;
    private static JVMCUSVCC sharedJvm4;

    private static RunUnit sharedRunUnit5;
    private static JVMCUSVCC sharedJvm5;

    static {
        try {
            sharedRunUnit1 = new RunUnit();
            sharedJvm1 = new JVMCUSVCC();
            sharedRunUnit1.Add(sharedJvm1);

            sharedRunUnit2 = new RunUnit();
            sharedJvm2 = new JVMCUSVCC();
            sharedRunUnit2.Add(sharedJvm2);

            sharedRunUnit3 = new RunUnit();
            sharedJvm3 = new JVMCUSVCC();
            sharedRunUnit3.Add(sharedJvm3);

            sharedRunUnit4 = new RunUnit();
            sharedJvm4 = new JVMCUSVCC();
            sharedRunUnit4.Add(sharedJvm4);

            sharedRunUnit5 = new RunUnit();
            sharedJvm5 = new JVMCUSVCC();
            sharedRunUnit5.Add(sharedJvm5);

            logger.info("Shared RunUnits 1-5 initialized for Balance Enquiry.");
        } catch (Exception e) {
            logger.error("Error initializing shared RunUnits", e);
        }
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String dbflag, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---RefNo: {}", refno);

        int index = counter.getAndIncrement() % 5;
        RunUnit selectedRunUnit = null;
        JVMCUSVCC selectedJvm = null;
        Lock selectedLock = null;
        String connectionString = new String();
        String driverclass = new String();

        switch (index) {
            case 0 : selectedRunUnit = sharedRunUnit1; selectedJvm = sharedJvm1; selectedLock = lock1; break; 
            case 1 : selectedRunUnit = sharedRunUnit2; selectedJvm = sharedJvm2; selectedLock = lock2; break; 
            case 2 : selectedRunUnit = sharedRunUnit3; selectedJvm = sharedJvm3; selectedLock = lock3; break; 
            case 3 : selectedRunUnit = sharedRunUnit4; selectedJvm = sharedJvm4; selectedLock = lock4; break; 
            case 4 : selectedRunUnit = sharedRunUnit5; selectedJvm = sharedJvm5; selectedLock = lock5; break; 
        }
        
        if (dbflag.equals("N")) {
            
            connectionString = nightJdbcUrl.split("@")[0] + nightUsername + "/" + nightPassword + "@" + nightJdbcUrl.split("@")[1];
            driverclass = nightDriverClass;
           }else if (dbflag.equals("Y")) {
           	
           	connectionString = dayJdbcUrl.split("@")[0] + dayUsername + "/" + dayPassword + "@" + dayJdbcUrl.split("@")[1];	
           	driverclass = dayDriverClass;
           }

        List<String> result = new ArrayList<>();
        String outputRes = "", combinedRes = "", errno = "0000";
        int recordCount = 0;

        LsAccountNumber input1 = new LsAccountNumber();
    	LsConnectionUrl	input2	=	new LsConnectionUrl();
    	LsDriverClass		input3	= new LsDriverClass();
        LsRecordArea inputRec = new LsRecordArea();
        LsOutputArray output1 = new LsOutputArray();
        LsErrorNumber output2 = new LsErrorNumber();
        LsArrayIndex output3 = new LsArrayIndex();

        input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
        input2.setLsConnectionUrl(connectionString);
        input3.setLsDriverClass(driverclass);
        inputRec.setLsRecordArea(inpcommonarea);
        
       
//        try (Connection connection = datasource.getConnection()) {
//            try {
				if (selectedLock.tryLock(2, TimeUnit.SECONDS)) {
				    try {
				        selectedRunUnit.Call("JVMCUSVCC", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), output2.get_Reference(),
				                output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference(), connection);

				        errno = output2.getLsErrorNumber();
				        outputRes = output1.getLsOutputArray();
				        recordCount = output3.getLsArrayIndex();

				        // Break into chunks of 98 characters
				        List<String> allRecords = new ArrayList<>();
				        for (int i = 0; i + 98 <= outputRes.length(); i += 98) {
				            String chunk = outputRes.substring(i, i + 98).trim();
				            if (chunk.isEmpty()) break;
				            allRecords.add(chunk);
				        }
				        errno = "0000";
				        combinedRes = String.join("", allRecords);

				        // Fallback if no records
				        if (combinedRes.trim().isEmpty()) {
				            errno = output2.getLsErrorNumber();
				        }

				    } finally {
				        selectedLock.unlock();
				    }
				} else {
				    logger.warn("Timeout acquiring lock for Balance Enquiry.");
				    errno = "0155";
				}
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}

//        } catch (SQLException e) {
//            logger.error("SQL Exception in Balance Enquiry: {}", e.getMessage(), e);
//            errno = "3293";
//        }

        result.add(combinedRes);
        result.add(String.valueOf(recordCount - 1));
        result.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---RefNo: {}", refno);
        return result;
    }
}


---------------------

package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.jvm.balance.JVMCUSVCC;
import com.jvm.balance.JVMCUSVCC.*;

public class BalanceEnqService_Child {

    @Value("${day.datasource.jdbc-url}")
    private String dayJdbcUrl;

    @Value("${day.datasource.username}")
    private String dayUsername;

    @Value("${day.datasource.password}")
    private String dayPassword;

    @Value("${day.datasource.driver-class-name}")
    private String dayDriverClass;

    @Value("${night.datasource.jdbc-url}")
    private String nightJdbcUrl;

    @Value("${night.datasource.username}")
    private String nightUsername;

    @Value("${night.datasource.password}")
    private String nightPassword;

    @Value("${night.datasource.driver-class-name}")
    private String nightDriverClass;

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final AtomicInteger counter = new AtomicInteger(0);

    private static final Lock lock1 = new ReentrantLock();
    private static final Lock lock2 = new ReentrantLock();
    private static final Lock lock3 = new ReentrantLock();
    private static final Lock lock4 = new ReentrantLock();
    private static final Lock lock5 = new ReentrantLock();

    private static final RunUnit sharedRunUnit1;
    private static final RunUnit sharedRunUnit2;
    private static final RunUnit sharedRunUnit3;
    private static final RunUnit sharedRunUnit4;
    private static final RunUnit sharedRunUnit5;

    private static final JVMCUSVCC sharedJvm1;
    private static final JVMCUSVCC sharedJvm2;
    private static final JVMCUSVCC sharedJvm3;
    private static final JVMCUSVCC sharedJvm4;
    private static final JVMCUSVCC sharedJvm5;

    static {
        sharedRunUnit1 = new RunUnit();
        sharedJvm1 = new JVMCUSVCC();
        sharedRunUnit1.Add(sharedJvm1);

        sharedRunUnit2 = new RunUnit();
        sharedJvm2 = new JVMCUSVCC();
        sharedRunUnit2.Add(sharedJvm2);

        sharedRunUnit3 = new RunUnit();
        sharedJvm3 = new JVMCUSVCC();
        sharedRunUnit3.Add(sharedJvm3);

        sharedRunUnit4 = new RunUnit();
        sharedJvm4 = new JVMCUSVCC();
        sharedRunUnit4.Add(sharedJvm4);

        sharedRunUnit5 = new RunUnit();
        sharedJvm5 = new JVMCUSVCC();
        sharedRunUnit5.Add(sharedJvm5);

        logger.info("Shared RunUnits 1-5 initialized for Balance Enquiry.");
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String dbflag, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---RefNo: {}", refno);

        int index = counter.getAndIncrement() % 5;

        RunUnit selectedRunUnit;
        JVMCUSVCC selectedJvm;
        Lock selectedLock;

        switch (index) {
            case 0 -> { selectedRunUnit = sharedRunUnit1; selectedJvm = sharedJvm1; selectedLock = lock1; }
            case 1 -> { selectedRunUnit = sharedRunUnit2; selectedJvm = sharedJvm2; selectedLock = lock2; }
            case 2 -> { selectedRunUnit = sharedRunUnit3; selectedJvm = sharedJvm3; selectedLock = lock3; }
            case 3 -> { selectedRunUnit = sharedRunUnit4; selectedJvm = sharedJvm4; selectedLock = lock4; }
            default -> { selectedRunUnit = sharedRunUnit5; selectedJvm = sharedJvm5; selectedLock = lock5; }
        }

        String connectionString, driverClass;

        if ("N".equalsIgnoreCase(dbflag)) {
            connectionString = nightJdbcUrl.split("@")[0] + nightUsername + "/" + nightPassword + "@" + nightJdbcUrl.split("@")[1];
            driverClass = nightDriverClass;
        } else {
            connectionString = dayJdbcUrl.split("@")[0] + dayUsername + "/" + dayPassword + "@" + dayJdbcUrl.split("@")[1];
            driverClass = dayDriverClass;
        }

        List<String> result = new ArrayList<>();
        String outputRes = "", combinedRes = "", errno = "0000";
        int recordCount = 0;

        // COBOL input/output setup
        LsAccountNumber input1 = new LsAccountNumber();
        LsConnectionUrl input2 = new LsConnectionUrl();
        LsDriverClass input3 = new LsDriverClass();
        LsRecordArea inputRec = new LsRecordArea();
        LsOutputArray output1 = new LsOutputArray();
        LsErrorNumber output2 = new LsErrorNumber();
        LsArrayIndex output3 = new LsArrayIndex();

        input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
        input2.setLsConnectionUrl(connectionString);
        input3.setLsDriverClass(driverClass);
        inputRec.setLsRecordArea(inpcommonarea);

        try {
            if (selectedLock.tryLock(2, TimeUnit.SECONDS)) {
                try {
                    selectedRunUnit.Call("JVMCUSVCC", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(),
                            output2.get_Reference(), output1.get_Reference(), output3.get_Reference(), inputRec.get_Reference(), datasource.getConnection());

                    errno = output2.getLsErrorNumber();
                    outputRes = output1.getLsOutputArray();
                    recordCount = output3.getLsArrayIndex();

                    List<String> allRecords = new ArrayList<>();
                    for (int i = 0; i + 98 <= outputRes.length(); i += 98) {
                        String chunk = outputRes.substring(i, i + 98).trim();
                        if (chunk.isEmpty()) break;
                        allRecords.add(chunk);
                    }

                    combinedRes = String.join("", allRecords);
                    if (combinedRes.trim().isEmpty()) {
                        errno = output2.getLsErrorNumber();
                    }

                } finally {
                    selectedLock.unlock();
                }
            } else {
                logger.warn("Timeout acquiring lock for Balance Enquiry.");
                errno = "0155";
            }
        } catch (Exception e) {
            logger.error("Exception during Balance Enquiry: {}", e.getMessage(), e);
            errno = "3293";
        }

        result.add(combinedRes);
        result.add(String.valueOf(recordCount - 1));
        result.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---RefNo: {}", refno);
        return result;
    }
}